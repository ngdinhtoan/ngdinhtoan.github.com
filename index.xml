<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Toán Nguyễn</title>
    <link>https://ngdinhtoan.github.io/</link>
    <description>Recent content on Toán Nguyễn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 31 Dec 2016 10:26:53 +0700</lastBuildDate>
    
	<atom:link href="https://ngdinhtoan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Glide Cleanup</title>
      <link>https://ngdinhtoan.github.io/glidecleanup/</link>
      <pubDate>Sat, 31 Dec 2016 10:26:53 +0700</pubDate>
      
      <guid>https://ngdinhtoan.github.io/glidecleanup/</guid>
      <description>A Glide&amp;rsquo;s plugin that removes unused packages from the glide.yaml file
Install go get github.com/ngdinhtoan/glide-cleanup  Run glide cleanup  License The MIT License</description>
    </item>
    
    <item>
      <title>FlagStruct</title>
      <link>https://ngdinhtoan.github.io/flagstruct/</link>
      <pubDate>Wed, 22 Jun 2016 21:13:53 +0700</pubDate>
      
      <guid>https://ngdinhtoan.github.io/flagstruct/</guid>
      <description>   
Install go get -u github.com/ngdinhtoan/flagstruct  Tag syntax `flag:&amp;quot;flagname&amp;quot; default:&amp;quot;default_value&amp;quot; usage:&amp;quot;description here&amp;quot;`  Tag default and usage can be omit.
Example packagemainimport(&amp;#34;fmt&amp;#34;&amp;#34;github.com/ngdinhtoan/flagstruct&amp;#34;)typedbConfigstruct{Hostnamestring`flag:&amp;#34;hostname&amp;#34; default:&amp;#34;localhost&amp;#34; usage:&amp;#34;Hostname&amp;#34;`Portuint64`flag:&amp;#34;port&amp;#34; default:&amp;#34;3306&amp;#34;`DbNamestring`flag:&amp;#34;db_name&amp;#34; usage:&amp;#34;Database name&amp;#34;`}funcmain(){conf:=dbConfig{}flagstruct.Parse(&amp;amp;conf)fmt.Println(&amp;#34;Hostname:&amp;#34;,conf.Hostname)fmt.Println(&amp;#34;Port:&amp;#34;,conf.Port)fmt.Println(&amp;#34;DB Name:&amp;#34;,conf.DbName)}  Run with some options:
go run main.go -hostname=127.0.0.1 -db_name=test_db  Output:
Hostname: 127.0.0.1 Port: 3306 DB Name: test_db  </description>
    </item>
    
    <item>
      <title>Hari</title>
      <link>https://ngdinhtoan.github.io/hari/</link>
      <pubDate>Wed, 08 Jul 2015 21:13:53 +0700</pubDate>
      
      <guid>https://ngdinhtoan.github.io/hari/</guid>
      <description>Why Hari? When you make a client for RESTful service in GO, usually you have to define some structures to parse JSON response. It&amp;rsquo;s boring and takes time. Hari will help you on that job.
But, please be aware that generated struct may not meet your requirement. You have to review it before using.
How to use Install Hari by running the following command
go get github.com/ngdinhtoan/hari  Put JSON string into a file within .</description>
    </item>
    
    <item>
      <title>SlackCmd</title>
      <link>https://ngdinhtoan.github.io/slackcmd/</link>
      <pubDate>Thu, 02 Jul 2015 21:34:43 +0700</pubDate>
      
      <guid>https://ngdinhtoan.github.io/slackcmd/</guid>
      <description>Install and import SlackCmd Of course, you have to install GO first if you do not have GO on your system.
Get SlackCmd by running command
go get github.com/ngdinhtoan/slackcmd  and import slackcmd package into your project
import&amp;#34;github.com/ngdinhtoan/slackcmd&amp;#34;  If you want to use stable version, don&amp;rsquo;t want the changes in master branch affect to your project, use SlackCmd v1 by
importslackcmd&amp;#34;gopkg.in/ngdinhtoan/slackcmd.v1&amp;#34;  How to use SlackCmd Checkout package github.</description>
    </item>
    
  </channel>
</rss>